generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int          @id @default(autoincrement())
  name               String       @db.VarChar(100)
  email              String       @unique @db.VarChar(45)
  phone_number       String?      @unique
  role               String       @default("user")
  verification_state Boolean      @default(false)
  password           String?      @db.VarChar(100)
  profile_picture    String?
  activities         Activity[]
  products           Product[]
  reputations        Reputation[]
  chats              Chat[]
  messages           Message[]
  github_id          String?
  google_id          String?
  orders             Order[]
  likes              Like[]
  created_at         DateTime     @default(now()) @map("registration_date")
  offers             Offer[]

  @@map("usuario")
}

model Reputation {
  id      Int    @id @default(autoincrement())
  score   Int
  comment String
  userId  Int
  user    User   @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@map("reputacion")
}

model Activity {
  id          Int    @id @default(autoincrement())
  description String
  userId      Int
  user        User   @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@map("actividad")
}

model ProductCategoriesOnProduct {
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model Category {
  id          Int                          @id @default(autoincrement())
  name        String                       @unique
  description String?
  products    ProductCategoriesOnProduct[]
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  image      String
  productId  Int?
  coverForId Int?     @unique
  coverFor   Product? @relation("CoverImage", fields: [coverForId], references: [id], onDelete: Cascade)
  product    Product? @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int                          @id @default(autoincrement())
  name        String
  description String
  price       Int
  tags        String[]
  categories  ProductCategoriesOnProduct[]
  userId      Int
  user        User                         @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  cover_image ProductImage?                @relation("CoverImage")
  images      ProductImage[]               @relation("ProductImages")
  order       Order?
  isActive    Boolean                      @default(true)
  Like        Like[]
  offers      Offer[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  messages  Message[]
  users     User[]
  createdAt DateTime  @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum OrderStatus {
  pending
  paid
  canceled
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  productId Int         @unique
  product   Product     @relation(fields: [productId], references: [id])
  status    OrderStatus @default(pending)
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Offer {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  price     Float
  createdAt DateTime @default(now())
}
